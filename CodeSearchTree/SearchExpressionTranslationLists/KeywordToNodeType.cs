namespace CodeSearchTree.SearchExpressionTranslationLists
{
    internal class KeywordToNodeType
    {
        internal static NodeType Translate(string keyword)
        {
            switch (keyword) //Ändra här om enumen i filen Node.cs ändras.
            {
                case "*":
                    return NodeType.Any;
                case "usingdirective":
                case "using_directive":
                    return NodeType.UsingDirectiveSyntaxNode;
                case "namespace":
                case "ns":
                    return NodeType.NamespaceDeclarationSyntaxNode;
                case "class":
                case "cls":
                    return NodeType.ClassDeclarationSyntaxNode;
                case "id":
                case "identifier":
                    return NodeType.IdentifierNameSyntaxNode;
                case "name":
                    return NodeType.QualifiedNameSyntaxNode;
                case "field":
                    return NodeType.FieldDeclarationSyntaxNode;
                case "vardeclaration":
                case "variabledeclaration":
                case "var_declaration":
                case "variable_declaration":
                    return NodeType.VariableDeclarationSyntaxNode;
                case "vardeclarator":
                case "variabledeclarator":
                case "var_declarator":
                case "variable_declarator":
                    return NodeType.VariableDeclaratorSyntaxNode;
                case "property":
                    return NodeType.PropertyDeclarationSyntaxNode;
                case "accessorlist":
                case "accessor_list":
                    return NodeType.AccessorListSyntaxNode;
                case "accessordeclaration":
                case "accessor_declaration":
                    return NodeType.AccessorDeclarationSyntaxNode;
                case "attlist":
                case "att_list":
                case "attributelist":
                case "attribute_list":
                    return NodeType.AttributeListSyntaxNode;
                case "attribute":
                    return NodeType.AttributeSyntaxNode;
                case "attarg":
                case "att_arg":
                case "attributeargument":
                case "attribute_argument":
                    return NodeType.AttributeArgumentListSyntaxNode;
                case "block":
                    return NodeType.BlockSyntaxNode;
                case "return":
                    return NodeType.ReturnStatementSyntaxNode;
                case "method":
                    return NodeType.MethodDeclarationSyntaxNode;
                case "predeftype":
                case "pre_def_type":
                case "predefinedtype":
                case "predefined_type":
                    return NodeType.PredefinedTypeSyntaxNode;
                case "paramlist":
                case "parameterlist":
                case "param_list":
                case "parameter_list":
                    return NodeType.ParameterListSyntaxNode;
                case "expression":
                    return NodeType.ExpressionStatementSyntaxNode;
                case "invocation":
                    return NodeType.InvocationExpressionSyntaxNode;
                case "arglist":
                case "argumentlist":
                case "arg_list":
                case "argument_list":
                    return NodeType.ArgumentListSyntaxNode;
                case "assignment":
                case "assign":
                    return NodeType.AssignmentExpressionSyntaxNode;
                case "memberaccess":
                case "membershipaccess":
                case "member_access":
                case "membership_access":
                    return NodeType.MemberAccessExpressionSyntaxNode;
                case "switch":
                    return NodeType.SwitchStatementSyntaxNode;
                case "arg":
                case "argument":
                    return NodeType.ArgumentSyntaxNode;
                case "literal":
                    return NodeType.LiteralExpressionSyntaxNode;
                case "if":
                    return NodeType.IfStatementSyntaxNode;
                case "prefix":
                    return NodeType.PrefixUnaryExpressionSyntaxNode;
                case "parenthesizedexpression":
                case "parenthesized_expression":
                    return NodeType.ParenthesizedExpressionSyntaxNode;
                case "binaryexpression":
                case "binary_expression":
                    return NodeType.BinaryExpressionSyntaxNode;
                case "else":
                    return NodeType.ElseClauseSyntaxNode;
                case "while":
                    return NodeType.WhileStatementSyntaxNode;
                case "break":
                    return NodeType.BreakStatementSyntaxNode;
                case "using":
                    return NodeType.UsingStatementSyntaxNode;
                case "for":
                    return NodeType.ForStatementSyntaxNode;
                case "labeledstatement":
                case "labeled_statement":
                    return NodeType.LabeledStatementSyntaxNode;
                case "baselist":
                case "base_list":
                    return NodeType.BaseListSyntaxNode;
                case "basetype":
                case "base_type":
                    return NodeType.SimpleBaseTypeSyntaxNode;
                case "genericname":
                case "generic_name":
                    return NodeType.GenericNameSyntaxNode;
                case "typearg":
                case "typeargument":
                case "type_arg":
                case "type_argument":
                    return NodeType.TypeArgumentListSyntaxNode;
                case "param":
                case "parameter":
                    return NodeType.ParameterSyntaxNode;
                case "localdeclaration":
                case "local_declaration":
                    return NodeType.LocalDeclarationStatementSyntaxNode;
                case "equalsvalue":
                case "equals_value":
                    return NodeType.EqualsValueClauseSyntaxNode;
                case "new":
                    return NodeType.ObjectCreationExpressionSyntaxNode;
                case "typeof":
                    return NodeType.TypeOfExpressionSyntaxNode;
                case "throw":
                    return NodeType.ThrowStatementSyntaxNode;
                case "this":
                    return NodeType.ThisExpressionSyntaxNode;
                case "lambda":
                    return NodeType.SimpleLambdaExpressionSyntaxNode;
                case "foreach":
                    return NodeType.ForEachStatementSyntaxNode;
                case "try":
                    return NodeType.TryStatementSyntaxNode;
                case "catch":
                    return NodeType.CatchClauseSyntaxNode;
                case "switchselection":
                case "switch_selection":
                    return NodeType.SwitchSectionSyntaxNode;
                case "case":
                    return NodeType.CaseSwitchLabelSyntaxNode;
                case "default":
                    return NodeType.DefaultSwitchLabelSyntaxNode;
                case "arraytype":
                case "array_type":
                    return NodeType.ArrayTypeSyntaxNode;
                case "arrayrank":
                case "array_rank":
                    return NodeType.ArrayRankSpecifierSyntaxNode;
                case "ommittedarraysize":
                case "ommitted_array_size":
                    return NodeType.OmittedArraySizeExpressionSyntaxNode;
                case "elementaccess":
                case "element_access":
                    return NodeType.ElementAccessExpressionSyntaxNode;
                case "brackedarglist":
                case "brackedargumentlist":
                case "bracked_arg_list":
                case "bracked_argument_list":
                    return NodeType.BracketedArgumentListSyntaxNode;
                case "conditionalexpression":
                case "conditional_expression":
                    return NodeType.ConditionalExpressionSyntaxNode;
                case "unaryexpression":
                case "unary_expression":
                    return NodeType.PostfixUnaryExpressionSyntaxNode;
                case "continue":
                    return NodeType.ContinueStatementSyntaxNode;
                case "constructor":
                    return NodeType.ConstructorDeclarationSyntaxNode;
                case "query":
                    return NodeType.QueryExpressionSyntaxNode;
                case "from":
                    return NodeType.FromClauseSyntaxNode;
                case "querybody":
                case "query_body":
                    return NodeType.QueryBodySyntaxNode;
                case "where":
                    return NodeType.WhereClauseSyntaxNode;
                case "select":
                    return NodeType.SelectClauseSyntaxNode;
                case "do":
                    return NodeType.DoStatementSyntaxNode;
                case "nameequals":
                case "name_equals":
                    return NodeType.NameEqualsSyntaxNode;
                case "enum":
                    return NodeType.EnumDeclarationSyntaxNode;
                case "constructorinit":
                case "constructor_init":
                case "constructorinitializer":
                case "constructor_initializer":
                    return NodeType.ConstructorInitializerSyntaxNode;
                case "empty":
                    return NodeType.EmptyStatementSyntaxNode;
                case "initexp":
                case "init_exp":
                    return NodeType.InitializerExpressionSyntaxNode;
                case "await":
                    return NodeType.AwaitExpressionSyntaxNode;
                case "anonymousobjectcreation":
                case "anonymous_object_creation":
                    return NodeType.AnonymousObjectCreationExpressionSyntaxNode;
                case "anonymousobjectmemberdeclarator":
                case "anonymous_object_member_declarator":
                    return NodeType.AnonymousObjectMemberDeclaratorSyntaxNode;
                case "typeparamlist":
                case "type_param_list":
                case "typeparameterlist":
                case "type_parameter_list":
                    return NodeType.TypeParameterListSyntaxNode;
                case "typeparam":
                case "type_param":
                case "typeparameter":
                case "type_parameter":
                    return NodeType.TypeParameterSyntaxNode;
                case "defaultexpression":
                case "default_expression":
                    return NodeType.DefaultExpressionSyntaxNode;
                case "interface":
                    return NodeType.InterfaceDeclarationSyntaxNode;
                case "cast":
                    return NodeType.CastExpressionSyntaxNode;
                case "base":
                    return NodeType.BaseExpressionSyntaxNode;
                case "atttarget":
                case "att_target":
                case "attributetarget":
                case "attribute_target":
                    return NodeType.AttributeTargetSpecifierSyntaxNode;
                case "alias":
                    return NodeType.AliasQualifiedNameSyntaxNode;
                case "explicitinterfacespecifier":
                case "explicit_interface_specifier":
                    return NodeType.ExplicitInterfaceSpecifierSyntaxNode;
                case "catchdeclaration":
                case "catch_declaration":
                    return NodeType.CatchDeclarationSyntaxNode;
                case "arrowexpression":
                case "arrow_expression":
                    return NodeType.ArrowExpressionClauseSyntaxNode;
                case "conditionalaccess":
                case "conditional_access":
                    return NodeType.ConditionalAccessExpressionSyntaxNode;
                case "memberbinding":
                case "member_binding":
                    return NodeType.MemberBindingExpressionSyntaxNode;
                case "interpolatedstring":
                case "interpolated_string":
                    return NodeType.InterpolatedStringExpressionSyntaxNode;
                case "interpolation":
                    return NodeType.InterpolationSyntaxNode;
                case "interpolatedtext":
                case "interpolated_text":
                    return NodeType.InterpolatedStringTextSyntaxNode;
                case "goto":
                    return NodeType.GotoStatementSyntaxNode;
                case "lock":
                    return NodeType.LockStatementSyntaxNode;
                case "array":
                    return NodeType.ArrayCreationExpressionSyntaxNode;
                case "finally":
                    return NodeType.FinallyClauseSyntaxNode;
                default:
                    return NodeType.UnknownNode;
            }
        }

    }
}