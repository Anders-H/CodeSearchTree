using System;

namespace CodeSearchTree.SearchExpressionTranslationLists
{
    internal class NodeTypeToKeyword
    {
        internal static string Translate(NodeType n)
        {
            switch (n)
            {
                case NodeType.UnknownNode:
                    return "unknown";
                case NodeType.UsingDirectiveSyntaxNode:
                    return "usingdirective";
                case NodeType.NamespaceDeclarationSyntaxNode:
                    return "ns";
                case NodeType.ClassDeclarationSyntaxNode:
                    return "cls";
                case NodeType.IdentifierNameSyntaxNode:
                    return "id";
                case NodeType.QualifiedNameSyntaxNode:
                    return "name";
                case NodeType.FieldDeclarationSyntaxNode:
                    return "field";
                case NodeType.VariableDeclarationSyntaxNode:
                    return "vardeclaration";
                case NodeType.VariableDeclaratorSyntaxNode:
                    return "vardeclarator";
                case NodeType.PropertyDeclarationSyntaxNode:
                    return "property";
                case NodeType.AccessorListSyntaxNode:
                    return "accessorlist";
                case NodeType.AccessorDeclarationSyntaxNode:
                    return "accessordeclaration";
                case NodeType.AttributeListSyntaxNode:
                    return "attlist";
                case NodeType.AttributeSyntaxNode:
                    return "attribute";
                case NodeType.AttributeArgumentListSyntaxNode:
                    return "attarg";
                case NodeType.BlockSyntaxNode:
                    return "block";
                case NodeType.ReturnStatementSyntaxNode:
                    return "return";
                case NodeType.MethodDeclarationSyntaxNode:
                    return "method";
                case NodeType.PredefinedTypeSyntaxNode:
                    return "predeftype";
                case NodeType.ParameterListSyntaxNode:
                    return "paramlist";
                case NodeType.ExpressionStatementSyntaxNode:
                    return "expression";
                case NodeType.InvocationExpressionSyntaxNode:
                    return "invocation";
                case NodeType.ArgumentListSyntaxNode:
                    return "arglist";
                case NodeType.AssignmentExpressionSyntaxNode:
                    return "assign";
                case NodeType.MemberAccessExpressionSyntaxNode:
                    return "memberaccess";
                case NodeType.SwitchStatementSyntaxNode:
                    return "switch";
                case NodeType.ArgumentSyntaxNode:
                    return "arg";
                case NodeType.LiteralExpressionSyntaxNode:
                    return "literal";
                case NodeType.IfStatementSyntaxNode:
                    return "if";
                case NodeType.PrefixUnaryExpressionSyntaxNode:
                    return "prefix";
                case NodeType.ParenthesizedExpressionSyntaxNode:
                    return "parenthesizedexpression";
                case NodeType.BinaryExpressionSyntaxNode:
                    return "binaryexpression";
                case NodeType.ElseClauseSyntaxNode:
                    return "else";
                case NodeType.WhileStatementSyntaxNode:
                    return "while";
                case NodeType.BreakStatementSyntaxNode:
                    return "break";
                case NodeType.UsingStatementSyntaxNode:
                    return "using";
                case NodeType.ForStatementSyntaxNode:
                    return "for";
                case NodeType.LabeledStatementSyntaxNode:
                    return "labeledstatement";
                case NodeType.BaseListSyntaxNode:
                    return "baselist";
                case NodeType.SimpleBaseTypeSyntaxNode:
                    return "basetype";
                case NodeType.GenericNameSyntaxNode:
                    return "genericname";
                case NodeType.TypeArgumentListSyntaxNode:
                    return "typearg";
                case NodeType.ParameterSyntaxNode:
                    return "param";
                case NodeType.LocalDeclarationStatementSyntaxNode:
                    return "localdeclaration";
                case NodeType.EqualsValueClauseSyntaxNode:
                    return "equalsvalue";
                case NodeType.ObjectCreationExpressionSyntaxNode:
                    return "new";
                case NodeType.TypeOfExpressionSyntaxNode:
                    return "typeof";
                case NodeType.ThrowStatementSyntaxNode:
                    return "throw";
                case NodeType.ThisExpressionSyntaxNode:
                    return "this";
                case NodeType.SimpleLambdaExpressionSyntaxNode:
                    return "lambda";
                case NodeType.ForEachStatementSyntaxNode:
                    return "foreach";
                case NodeType.TryStatementSyntaxNode:
                    return "try";
                case NodeType.CatchClauseSyntaxNode:
                    return "catch";
                case NodeType.SwitchSectionSyntaxNode:
                    return "switchselection";
                case NodeType.CaseSwitchLabelSyntaxNode:
                    return "case";
                case NodeType.DefaultSwitchLabelSyntaxNode:
                    return "default";
                case NodeType.ArrayTypeSyntaxNode:
                    return "arraytype";
                case NodeType.ArrayRankSpecifierSyntaxNode:
                    return "arrayrank";
                case NodeType.OmittedArraySizeExpressionSyntaxNode:
                    return "ommittedarraysize";
                case NodeType.ElementAccessExpressionSyntaxNode:
                    return "elementaccess";
                case NodeType.BracketedArgumentListSyntaxNode:
                    return "brackedarglist";
                case NodeType.ConditionalExpressionSyntaxNode:
                    return "conditionalexpression";
                case NodeType.PostfixUnaryExpressionSyntaxNode:
                    return "unaryexpression";
                case NodeType.ContinueStatementSyntaxNode:
                    return "continue";
                case NodeType.ConstructorDeclarationSyntaxNode:
                    return "constructor";
                case NodeType.QueryExpressionSyntaxNode:
                    return "query";
                case NodeType.FromClauseSyntaxNode:
                    return "from";
                case NodeType.QueryBodySyntaxNode:
                    return "querybody";
                case NodeType.WhereClauseSyntaxNode:
                    return "where";
                case NodeType.SelectClauseSyntaxNode:
                    return "select";
                case NodeType.DoStatementSyntaxNode:
                    return "do";
                case NodeType.NameEqualsSyntaxNode:
                    return "nameequals";
                case NodeType.EnumDeclarationSyntaxNode:
                    return "enum";
                case NodeType.AttributeArgumentSyntaxNode:
                    return "attarg";
                case NodeType.ConstructorInitializerSyntaxNode:
                    return "constructorinit";
                case NodeType.EmptyStatementSyntaxNode:
                    return "empty";
                case NodeType.InitializerExpressionSyntaxNode:
                    return "initexp";
                case NodeType.AwaitExpressionSyntaxNode:
                    return "await";
                case NodeType.AnonymousObjectCreationExpressionSyntaxNode:
                    return "anonymousobjectcreation";
                case NodeType.AnonymousObjectMemberDeclaratorSyntaxNode:
                    return "anonymousobjectmemberdeclarator";
                case NodeType.TypeParameterListSyntaxNode:
                    return "typeparamlist";
                case NodeType.TypeParameterSyntaxNode:
                    return "typeparam";
                case NodeType.DefaultExpressionSyntaxNode:
                    return "defaultexpression";
                case NodeType.InterfaceDeclarationSyntaxNode:
                    return "interface";
                case NodeType.CastExpressionSyntaxNode:
                    return "cast";
                case NodeType.BaseExpressionSyntaxNode:
                    return "base";
                case NodeType.AttributeTargetSpecifierSyntaxNode:
                    return "atttarget";
                case NodeType.AliasQualifiedNameSyntaxNode:
                    return "alias";
                case NodeType.ExplicitInterfaceSpecifierSyntaxNode:
                    return "explicitinterfacespecifier";
                case NodeType.CatchDeclarationSyntaxNode:
                    return "catchdeclaration";
                case NodeType.ArrowExpressionClauseSyntaxNode:
                    return "arrowexpression";
                case NodeType.ConditionalAccessExpressionSyntaxNode:
                    return "conditionalaccess";
                case NodeType.MemberBindingExpressionSyntaxNode:
                    return "memberbinding";
                case NodeType.InterpolatedStringExpressionSyntaxNode:
                    return "interpolatedstring";
                case NodeType.InterpolationSyntaxNode:
                    return "interpolation";
                case NodeType.InterpolatedStringTextSyntaxNode:
                    return "interpolatedtext";
                case NodeType.GotoStatementSyntaxNode:
                    return "goto";
                case NodeType.LockStatementSyntaxNode:
                    return "lock";
                case NodeType.ArrayCreationExpressionSyntaxNode:
                    return "array";
                case NodeType.FinallyClauseSyntaxNode:
                    return "finally";
                default:
                    throw new SystemException($"Argument out of range: {n}");
            }
        }
    }
}